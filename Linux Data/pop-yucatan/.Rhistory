rm(list=ls())
url <- function(address, return.call = "json", sensor = "false") {
root <- "https://maps.googleapis.com/maps/api/geocode/"
u <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(u))
}
geoCode <- function(address,verbose=FALSE) {
if(verbose) cat(address,"\n")
u <- url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
location_type <- x$results[[1]]$geometry$location_type
formatted_address <- x$results[[1]]$formatted_address
return(c(lat, lng, location_type, formatted_address))
Sys.sleep(0.5)
} else {
return(c(NA,NA,NA,NA))
}
}
# Use plyr to ggeocoding for a vector
address <- c("The White House, Washington, DC", "The Capitol, Washington, DC")
locations <- ldply(address, function(x) geoCode(x))
names(locations) <- c("lat", "lon", "location_type", "formatted")
head(locations)
address
rootdir="C:/Users/Silvio/Documents/GitHub/U-of-Florida-Yucatan-Project/"
setwd(paste0(rootdir,"Linux Data/pop-yucatan/"))
# setwd("C:/Users/Silvio/Documents/R/Yucatan-Project/Pictures")
# install.packages("cluster")
library(cluster)
# install.packages("dplyr")
library(dplyr)
#py<-read.table(file="C:/Users/Silvio/Documents/R/Yucatan-Project/pop-yucatan/population-yucatan.txt",header=TRUE)
# py=read.table(file="pop-yucatan/population-yucatan_old.txt",header = T)
# py<- read.table(file="population-yucatan.txt",header = T)
# ly<-read.table(file="locations-yucatan.txt",header=TRUE)
py<- read.table("population-yucatan-silvio.txt",header = T)
ly<-read.table("locations-yucatan-silvio.txt",header=T)
ly$hid=ly$id
ly$workid=ly$id
py=left_join(py,ly[,c("hid","x","y")],by="hid")#adding 2 columns in py (after workid) with house x y coordinates
py=left_join(py,ly[,c("workid","x","y")],by="workid")
colnames(py)<-c("pid","hid","age","sex","hh_serial","pernum","workid","x1","y1","x2","y2")
#x1 and y1 refer to the home coordinates, and x2 y2 refer to the work or school
# py1<-py
head(py)
# ly$Urban=x#Create urban/rural column
# colnames(ly)<-c(" id",  "type"," x","y" ,"x_ctr", "y_ctr" ,"Urban/Rural")
#Haversine
#pi=3.141593
rm(pi)
hav=function(x1,y1,x2,y2){
#convert degrees to radians by multiplying by pi, dividing by 180
#y's should be latitudes and x's should be longitudes
return(12742 *asin(sqrt((sin(pi/180*(y2-y1)/2))^2
+cos(pi/180*y1)*cos(pi/180*y2)*(sin(pi/180*(x2-x1)/2))^2)))
}
12742/2
hav(-89.6848792716 ,20.6464119922,-89.0323486633, 20.8012998636)#=70.01462
####Creating distance column with haversine
start = Sys.time()
hav_vec=hav(py[,8],py[,9],py[,10],py[,11])##ANOTHER FAST WAY TO CALCULATE
py$distance=hav_vec
print(Sys.time()-start)
#head(py)
#Setting up histogram
hist(py[1:1819497,12], xlab="Daily Distance Traveled (km)", main="Population Distribution of Daily Travel in Yucatan")
# py$logdist=py$distance#adds new column called logdist set equal to distance
# py$logdist[which(py$logdist==0)]=5/1000##Changing the zeroes in the data to 5/1000 because cant take log(0)
# py$logdist=log10(py$logdist)#Taking log of the data for logdist
# ##py$distance=apply_dists# adds the haversine function to the distance column in population
people_mat = py[,c('pid','workid','distance')]##shortening the py matrix to 3 columns
loc_labels = ly[,c('id','type')]##**shortening the matrix of locations to these 2 columns
names(loc_labels)[1] = 'workid' #names the column workid
movement_by_type = merge(people_mat, loc_labels)#**merging the shortened py and ly with "workid" , organized by number in dataset
#movement by type has houses, schools, work, organized by work id and pid; histogram the distances separete as types (school or work)
# movement_by_log = merge(people_log, loc_labels)
#??in merge, are we merging people_mt and loc_labels with "workid" and organizing the distances by their workid?
table(movement_by_type$distance[movement_by_type$type=='house'])#gives number of people working from home (distance 0)
#which is 620859
students=py[py$age>4 & py$age<18,]
schools = ly[ly$type=='school',]
1-.429
179/485
1-179/485
306/485
179/485
34/43
1/140
2/7
.0833*6
19/156
5/328
5/402
40/900
156/2932
1-.0911
60*24*365
247319/525600
247319/134064
134064/365
134064/(365*24)
134064/(365*52)
247319/134064
